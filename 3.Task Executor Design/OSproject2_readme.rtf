{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Consolas;}
{\colortbl;\red255\green255\blue255;\red133\green0\blue175;\red26\green26\blue26;\red253\green154\blue0;
\red122\green117\blue0;\red49\green49\blue49;\red241\green241\blue241;\red0\green0\blue255;\red255\green39\blue18;
\red0\green68\blue254;\red0\green61\blue204;\red102\green0\blue141;\red85\green142\blue40;\red63\green105\blue30;
\red217\green11\blue0;}
\margl1440\margr1440\vieww15860\viewh11960\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 //////////////////////////////////////////////////////////////////////\
// The following four is provided by professor\
//////////////////////////////////////////////////////////////////////\
Interface Task: execute() method must be implement\
\
Interface TaskExecutor: addTask() method must be implement\
\
Class TaskExecutorTest\
1. initialize 10 thread by new \cf2 TaskExecutorImpl\cf0 (10)\
1.1 actually 10 thread will execute run() to get task from BlockingTaskQueue, while it is empty right now, so blocked, and will not call \cf3 \ul \ulc3 execute()\cf0 \ulnone  to print task information.\
2. use a anonymous inner class to create a instance of Runnable\'92s subclass( implement run() method ).\
2.1. the run() method will try to create 1000 task by new \cf4 SimpleTestTask\cf0 (), and \cf5 addTask\cf0  to BlockingFIFO\
2.2. 
\i what is and why use anonymous inner class?
\i0 \
2.2.1 
\i It is an inner class without name and can only be used once.
\i0 \
2.2.2
\i  It must have a parent class or interface
\i0 \
2.2.3 
\i It can simply java code
\i0 \
2.2.4 
\f1 \cf6 \cb7 \expnd0\expndtw0\kerning0
\'a0\'a0\'a0\'a0Person p = \cf8 \expnd0\expndtw0\kerning0
new\cf6 \expnd0\expndtw0\kerning0
 Person() \{  \
	   //originally we need to define a subclass of Person named Child\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf6 \cb1 \expnd0\expndtw0\kerning0
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 \expnd0\expndtw0\kerning0
public\cf6 \expnd0\expndtw0\kerning0
 \cf8 \expnd0\expndtw0\kerning0
void\cf6 \expnd0\expndtw0\kerning0
 eat() \{\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf6 \cb7 \expnd0\expndtw0\kerning0
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0System.out.println(\cf8 \expnd0\expndtw0\kerning0
"eat something"\cf6 \expnd0\expndtw0\kerning0
);\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf6 \cb1 \expnd0\expndtw0\kerning0
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf6 \cb7 \expnd0\expndtw0\kerning0
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\};\
	   //like 2.2.1 described, it can and just need to be used just once\
	   p.eat()
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 3. pass the instance of Runnable as  a parameter to new Thread(Runnable)\
4. then, call thread.start(), start execute run() method\
\
Class SimpleTestTask\
1. include \ul execute\ulnone () method, which sleep for a while, then print task information.\
2. class MutableInt is just for count the number of current active task\
\
//////////////////////////////////////////////////////////\
// The three classes is our work\
//////////////////////////////////////////////////////////\
\
Class TaskRunner: \
1. create and initiate \cf9 BlockingTaskQueue\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf3 2. define a static getTaskQueue() to return \cf9 BlockingTaskQueue \cf0 \
2. define \cf10 r\cf11 un() \cf0 method, in a while(true) loop, always try to obtain a task from \cf9 BlockingTaskQueue\cf0  and execute task.\
\
\
Class \cf12 TaskExecutorimpl\cf0 : \
1. pass the \cf13 thread\cf0  \cf14 pool size\cf0  as a parameter to the constructor\
2. within the constructor, it uses a for loop to create a object of  TaskRunner and use it to create a \cf14 thread\cf0  and call start()(iterate \cf14 pool size = 10 times)\cf0 \
3. define a \cf5 addTask\cf0 (Task) method to use Blocking TaskQueue.add(task) to add task\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc
\cf0 Class \cf15 BlockingTaskQueue\cf0 :\
1. define void add(Task) and Task remove() method\
2. add(Task) will use semaForAdd, semaForMutex and semaForRemove to implement blockingFIFO\
2.1. semaForAdd is initatead as size 100 (this is queue length, different from thread pool size)\
2.2. semeForMutex is initiated as 1, to make sure only one thread is using the queue.\
2.3. semeForRemove is initiated as 0, and will increment by 1 when called add(task)\
3. Task remove()  is easy to understand if add(task) is clear.}