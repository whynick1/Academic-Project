{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red217\green11\blue0;\red0\green68\blue254;\red85\green142\blue40;
\red106\green62\blue62;\red0\green0\blue192;\red63\green105\blue30;}
\margl1440\margr1440\vieww15920\viewh15380\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 class BatchProcessor:\
1. we have the main() method\
2. pass the arg[] to Batchparser object to parse the command in .xml file and build Batch object.\
3. use executeBath(Batch bp.\cf2 buildBatch\cf0 ) to execute those commands.\
\
3.1 executeBatch() get the Map<String, Command> from bat.getCommands()\
3.2 use a for loop to execute each command from the map\
\
class Batchparser:\
1. aim to achieve \cf2 buildBatch(\cf0 ) method, within this method:\
1.1. get each element(contain command info) by utilizing professor\'92s code\
1.2. cmd = buildCommand(element)\
1.3. then, bat.\cf3 addCommand\cf0 (cmd)\
\
1.2.1 buildComand(element) achieve call different cmd.parse(cmd could be WDCommand/CmdCommand or else) to build command, include details like id, path, inID, outID\'85\
1.3.1 \cf3 addCommand\cf0 () will put(command.id, command) into Map<String, Command>\
\
class Command:\
1. define a abstract class Command\
2. define WDCommand, CmdCommand\'85extend Command\
3. override describe(), parse(), execute() method in each subclass(\ul CmdCommand and PipeCommand are most important and hard\ulnone )\
4. CmdCommand.parse() is provided by professor\
5. CmdCommand.execute() call bat.\cf4 getCommands()\cf0  to get 
\b Map
\b0 \
5.1 setup ProcessBuilder 
\b builder
\b0 \
5.2 then, 
\b builder.
\b0 redirectInput(File) (File get with 
\b Map
\b0 )\
5.3 same way, redirectOutput()\
5.4 t
\i he reason why redirect input and output is the addLine.jar provided by professor input from stdin and output to stdout, but what we need is input from a file and output to another.\
\

\i0 6. PipeCommand.parse use a for loop and a \'93count\'94 to build two separate CmdComand\
7. PipeCommand.execute first process command1 by:\
7.1 create a ProcessorBuilder, and redirectInput to 
\f1 \cf5 map\cf0 .get(\cf6 inID\cf0 ).\cf6 path\cf0 ).
\f0 \
7.2 call start() to create a process\
7.3 use professor\'92s example code to read content from input stream to FileOutputStream (means use a temp file to store output of command1)\
8. PipeCommand.execute then process command2 by:\
8.1 redirectInput() and redirectOutput() of the ProcessBuilder object, then call start()\
\
class Batch:\
1*. new  a inner class BatchInstance to create an instance of Batch class\
2*. use getInstance to return the instance\
3. create a LinkedHashMap<String, Command> 
\b commands
\b0  to store commands\
4. define void addCommand(Command) \
5. define Map<String, Command> \cf7 getCommands\cf0 () to return Map\
\
4.1 
\b commands
\b0 .put(command.id, command)\
}